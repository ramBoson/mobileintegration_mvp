{"version":3,"sources":["App.tsx","components/Wrapper.tsx","components/Modal.tsx","assets/algo.svg","components/Icon.tsx","components/ASAIcon.tsx","components/AssetRow.tsx","components/AccountAssets.tsx","components/Blockie.tsx","components/Header.tsx","index.tsx","helpers/api.ts","components/Column.tsx","components/Loader.tsx","helpers/utilities.ts","components/Button.tsx","styles.ts","scenarios.ts"],"names":["SLayout","styled_components__WEBPACK_IMPORTED_MODULE_2__","div","templateObject_1","Object","tslib__WEBPACK_IMPORTED_MODULE_0__","SContent","_components_Wrapper__WEBPACK_IMPORTED_MODULE_9__","templateObject_2","SLanding","_components_Column__WEBPACK_IMPORTED_MODULE_8__","templateObject_3","SButtonContainer","templateObject_4","SConnectButton","_components_Button__WEBPACK_IMPORTED_MODULE_7__","templateObject_5","_styles__WEBPACK_IMPORTED_MODULE_13__","size","medium","SContainer","templateObject_6","SModalContainer","templateObject_7","SModalTitle","templateObject_8","SModalButton","button","templateObject_9","SModalParagraph","p","templateObject_10","SBalances","templateObject_11","STable","templateObject_12","SRow","templateObject_13","SKey","templateObject_14","SValue","templateObject_15","STestButtonContainer","templateObject_16","STestButton","templateObject_17","INITIAL_STATE","connector","fetching","connected","showModal","pendingRequest","signedTxns","pendingSubmissions","uri","accounts","address","result","chain","_helpers_api__WEBPACK_IMPORTED_MODULE_14__","TestNet","assets","App","_super","_this","apply","this","arguments","state","walletConnectInit","_walletconnect_client__WEBPACK_IMPORTED_MODULE_3__","bridge","qrcodeModal","algorand_walletconnect_qrcode_modal__WEBPACK_IMPORTED_MODULE_4___default","a","setState","_a","sent","createSession","subscribeToEvents","on","error","payload","console","log","params","onSessionUpdate","onConnect","onDisconnect","killSession","resetApp","chainUpdate","newChain","getAccountAssets","_b","error_1","toggleModal","signTxnScenario","scenario","txnsToSign_1","flatTxns","reduce","acc","val","concat","walletTxns","map","txn","signers","authAddr","message","Buffer","from","algosdk__WEBPACK_IMPORTED_MODULE_6___default","encodeUnsignedTransaction","toString","requestParams","request","_json_rpc_tools_utils__WEBPACK_IMPORTED_MODULE_5__","sendCustomRequest","indexToGroup_1","index","group","length","groupLength","Error","signedPartialTxns_1","forEach","r","i","_c","groupIndex","toSign","undefined","push","rawSignedTxn","Uint8Array","signedPartialTxnsInternal","stxn","_scenarios__WEBPACK_IMPORTED_MODULE_16__","signedTxnInfo","signedTxn","decodeSignedTransaction","txID","unsignedTxID","sig","signingAddress","sgnr","encodeAddress","signature","formattedResult","method","body","error_2","render","react__WEBPACK_IMPORTED_MODULE_1__","maxWidth","spanHeight","_components_Header__WEBPACK_IMPORTED_MODULE_11__","center","_components_Loader__WEBPACK_IMPORTED_MODULE_12__","_components_AccountAssets__WEBPACK_IMPORTED_MODULE_15__","name","left","key","onClick","_components_Modal__WEBPACK_IMPORTED_MODULE_10__","show","txnIndex","submitSignedTransaction","disabled","submissionInfo","content","prefix","prototype","confirmedRound_1","prevState","v","err_1","__webpack_exports__","fadeIn","styled_components__WEBPACK_IMPORTED_MODULE_3__","SWrapper","Wrapper","props","children","propTypes","prop_types__WEBPACK_IMPORTED_MODULE_2__","isRequired","defaultProps","SLightbox","offset","opacity","alpha","SHitbox","SCloseButton","_styles__WEBPACK_IMPORTED_MODULE_4__","short","color","SCard","white","SModalContent","Modal","d","window","document","getElementsByTagName","style","position","componentDidUpdate","lightbox","lightboxRect","getBoundingClientRect","top","ref","c","module","exports","__webpack_require__","SIcon","styled_components_browser_esm","img","tslib_es6","Icon","src","fallback","react","onError","event","target","prop_types","components_Icon","ASAIcon","assetID","components_ASAIcon","SAssetRow","AssetRow_templateObject_1","SAssetRowLeft","SAssetName","SAssetRowRight","SAssetBalance","components_AssetRow","asset","nativeCurrencyIcon","id","algo_default","utilities","amount","decimals","unitName","nativeCurrency","find","BigInt","creator","frozen","tokens","filter","Column","token","SBlockieWrapper","Blockie","seed","toLowerCase","imgUrl","blockies","create","toDataURL","alt","components_Blockie","SHeader","Header_templateObject_1","SActiveAccount","SActiveChain","SBlockie","SAddress","styles","base","SDisconnect","Header","onChange","s","api","MainNet","stringToChainType","value","GlobalStyle","_styles__WEBPACK_IMPORTED_MODULE_5__","react_dom__WEBPACK_IMPORTED_MODULE_2__","_App__WEBPACK_IMPORTED_MODULE_4__","getElementById","ChainType","mainNetClient","algosdk__WEBPACK_IMPORTED_MODULE_1___default","Algodv2","testNetClient","clientForChain","apiGetAccountAssets","Promise","client","accountInformation","setIntDecoding","IntDecoding","BIGINT","do","accountInfo","algoBalance","assetsFromRes","Number","sort","b","all","getAssetByID","url","unshift","apiGetTxnParams","getTransactionParams","apiSubmitTransactions","stxns","sendRawTransaction","txId","waitForTransaction","status","lastStatus","lastRound","pendingTransactionInformation","statusAfterBlock","SColumn","load","SLoader","svg","Loader","rgb","viewBox","stroke","strokeWidth","fill","fillRule","x","y","width","height","rx","ellipseAddress","slice","formatBigNumWithDecimals","num","singleUnit","repeat","fractionalUnits","padStart","SHoverLayer","SButton","outline","soft","weight","semibold","icon","hover","Button","type","_Loader__WEBPACK_IMPORTED_MODULE_3__","colors","fonts","transitions","shadows","globalStyle","black","dark","grey","darkGrey","lightGrey","blue","lightBlue","yellow","orange","green","pink","red","purple","tiny","small","large","h1","h2","h3","h4","h5","h6","normal","bold","extrabold","family","OpenSans","long","big","AssetTransactionType","testAccounts","mnemonicToSecretKey","signTxnWithTestAccount","sender","publicKey","_i","testAccounts_1","testAccount","addr","signTxn","sk","scenarios","_helpers_api__WEBPACK_IMPORTED_MODULE_2__","suggestedParams","makePaymentTxnWithSuggestedParamsFromObject","to","note"],"mappings":"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","file":"static/js/main.89e18fd8.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport WalletConnect from \"@walletconnect/client\";\r\nimport QRCodeModal from \"algorand-walletconnect-qrcode-modal\";\r\nimport { IInternalEvent } from \"@walletconnect/types\";\r\nimport { formatJsonRpcRequest } from \"@json-rpc-tools/utils\";\r\nimport algosdk from \"algosdk\";\r\nimport Button from \"./components/Button\";\r\nimport Column from \"./components/Column\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Modal from \"./components/Modal\";\r\nimport Header from \"./components/Header\";\r\nimport Loader from \"./components/Loader\";\r\nimport { fonts } from \"./styles\";\r\nimport { apiGetAccountAssets, apiSubmitTransactions, ChainType } from \"./helpers/api\";\r\nimport { IAssetData, IWalletTransaction, SignTxnParams } from \"./helpers/types\";\r\nimport AccountAssets from \"./components/AccountAssets\";\r\nimport { Scenario, scenarios, signTxnWithTestAccount } from \"./scenarios\";\r\n\r\nconst SLayout = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  /* height: 100%; */\r\n  min-height: 100vh;\r\n  text-align: center;\r\n`;\r\n\r\nconst SContent = styled(Wrapper as any)`\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 0 16px;\r\n`;\r\n\r\nconst SLanding = styled(Column as any)`\r\n  height: 600px;\r\n`;\r\n\r\nconst SButtonContainer = styled(Column as any)`\r\n  width: 250px;\r\n  margin: 50px 0;\r\n`;\r\n\r\nconst SConnectButton = styled(Button as any)`\r\n  border-radius: 8px;\r\n  font-size: ${fonts.size.medium};\r\n  height: 44px;\r\n  width: 100%;\r\n  margin: 12px 0;\r\n`;\r\n\r\nconst SContainer = styled.div`\r\n  height: 100%;\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  word-break: break-word;\r\n`;\r\n\r\nconst SModalContainer = styled.div`\r\n  width: 100%;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nconst SModalTitle = styled.div`\r\n  margin: 1em 0;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst SModalButton = styled.button`\r\n  margin: 1em 0;\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst SModalParagraph = styled.p`\r\n  margin-top: 30px;\r\n`;\r\n\r\n// @ts-ignore\r\nconst SBalances = styled(SLanding as any)`\r\n  height: 100%;\r\n  & h3 {\r\n    padding-top: 30px;\r\n  }\r\n`;\r\n\r\nconst STable = styled(SContainer as any)`\r\n  flex-direction: column;\r\n  text-align: left;\r\n`;\r\n\r\nconst SRow = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 6px 0;\r\n`;\r\n\r\nconst SKey = styled.div`\r\n  width: 30%;\r\n  font-weight: 700;\r\n`;\r\n\r\nconst SValue = styled.div`\r\n  width: 70%;\r\n  font-family: monospace;\r\n`;\r\n\r\nconst STestButtonContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst STestButton = styled(Button as any)`\r\n  border-radius: 8px;\r\n  font-size: ${fonts.size.medium};\r\n  height: 64px;\r\n  width: 100%;\r\n  max-width: 175px;\r\n  margin: 12px;\r\n`;\r\n\r\ninterface IResult {\r\n  method: string;\r\n  body: Array<\r\n    Array<{\r\n      txID: string;\r\n      signingAddress?: string;\r\n      signature: string;\r\n    } | null>\r\n  >;\r\n}\r\n\r\ninterface IAppState {\r\n  connector: WalletConnect | null;\r\n  fetching: boolean;\r\n  connected: boolean;\r\n  showModal: boolean;\r\n  pendingRequest: boolean;\r\n  signedTxns: Uint8Array[][] | null;\r\n  pendingSubmissions: Array<number | Error>;\r\n  uri: string;\r\n  accounts: string[];\r\n  address: string;\r\n  result: IResult | null;\r\n  chain: ChainType;\r\n  assets: IAssetData[];\r\n}\r\n\r\nconst INITIAL_STATE: IAppState = {\r\n  connector: null,\r\n  fetching: false,\r\n  connected: false,\r\n  showModal: false,\r\n  pendingRequest: false,\r\n  signedTxns: null,\r\n  pendingSubmissions: [],\r\n  uri: \"\",\r\n  accounts: [],\r\n  address: \"\",\r\n  result: null,\r\n  chain: ChainType.TestNet,\r\n  assets: [],\r\n};\r\n\r\nclass App extends React.Component<unknown, IAppState> {\r\n  public state: IAppState = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  public walletConnectInit = async () => {\r\n    // bridge url\r\n    const bridge = \"https://bridge.walletconnect.org\";\r\n\r\n    // create new connector\r\n    const connector = new WalletConnect({ bridge, qrcodeModal: QRCodeModal });\r\n\r\n    await this.setState({ connector });\r\n\r\n    // check if already connected\r\n    if (!connector.connected) {\r\n      // create new session\r\n      await connector.createSession();\r\n    }\r\n\r\n    // subscribe to events\r\n    await this.subscribeToEvents();\r\n  };\r\n  public subscribeToEvents = () => {\r\n    const { connector } = this.state;\r\n\r\n    if (!connector) {\r\n      return;\r\n    }\r\n\r\n    connector.on(\"session_update\", async (error, payload) => {\r\n      console.log(`connector.on(\"session_update\")`);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const { accounts } = payload.params[0];\r\n      this.onSessionUpdate(accounts);\r\n    });\r\n\r\n    connector.on(\"connect\", (error, payload) => {\r\n      console.log(`connector.on(\"connect\")`);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      this.onConnect(payload);\r\n    });\r\n\r\n    connector.on(\"disconnect\", (error, payload) => {\r\n      console.log(`connector.on(\"disconnect\")`);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      this.onDisconnect();\r\n    });\r\n\r\n    if (connector.connected) {\r\n      const { accounts } = connector;\r\n      const address = accounts[0];\r\n      this.setState({\r\n        connected: true,\r\n        accounts,\r\n        address,\r\n      });\r\n      this.onSessionUpdate(accounts);\r\n    }\r\n\r\n    this.setState({ connector });\r\n  };\r\n\r\n  public killSession = async () => {\r\n    const { connector } = this.state;\r\n    if (connector) {\r\n      connector.killSession();\r\n    }\r\n    this.resetApp();\r\n  };\r\n\r\n  public chainUpdate = (newChain: ChainType) => {\r\n    this.setState({ chain: newChain }, this.getAccountAssets);\r\n  };\r\n\r\n  public resetApp = async () => {\r\n    await this.setState({ ...INITIAL_STATE });\r\n  };\r\n\r\n  public onConnect = async (payload: IInternalEvent) => {\r\n    const { accounts } = payload.params[0];\r\n    const address = accounts[0];\r\n    await this.setState({\r\n      connected: true,\r\n      accounts,\r\n      address,\r\n    });\r\n    this.getAccountAssets();\r\n  };\r\n\r\n  public onDisconnect = async () => {\r\n    this.resetApp();\r\n  };\r\n\r\n  public onSessionUpdate = async (accounts: string[]) => {\r\n    const address = accounts[0];\r\n    await this.setState({ accounts, address });\r\n    await this.getAccountAssets();\r\n  };\r\n\r\n  public getAccountAssets = async () => {\r\n    const { address, chain } = this.state;\r\n    this.setState({ fetching: true });\r\n    try {\r\n      // get account balances\r\n      const assets = await apiGetAccountAssets(chain, address);\r\n\r\n      await this.setState({ fetching: false, address, assets });\r\n    } catch (error) {\r\n      console.error(error);\r\n      await this.setState({ fetching: false });\r\n    }\r\n  };\r\n\r\n  public toggleModal = () =>\r\n    this.setState({\r\n      showModal: !this.state.showModal,\r\n      pendingSubmissions: [],\r\n    });\r\n\r\n  public signTxnScenario = async (scenario: Scenario) => {\r\n    const { connector, address, chain } = this.state;\r\n\r\n    if (!connector) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const txnsToSign = await scenario(chain, address);\r\n\r\n      // open modal\r\n      this.toggleModal();\r\n\r\n      // toggle pending request indicator\r\n      this.setState({ pendingRequest: true });\r\n\r\n      const flatTxns = txnsToSign.reduce((acc, val) => acc.concat(val), []);\r\n\r\n      const walletTxns: IWalletTransaction[] = flatTxns.map(\r\n        ({ txn, signers, authAddr, message }) => ({\r\n          txn: Buffer.from(algosdk.encodeUnsignedTransaction(txn)).toString(\"base64\"),\r\n          signers, // TODO: put auth addr in signers array\r\n          authAddr,\r\n          message,\r\n        }),\r\n      );\r\n\r\n      // sign transaction\r\n      const requestParams: SignTxnParams = [walletTxns];\r\n      const request = formatJsonRpcRequest(\"algo_signTxn\", requestParams);\r\n      const result: Array<string | null> = await connector.sendCustomRequest(request);\r\n\r\n      console.log(\"Raw response:\", result);\r\n\r\n      const indexToGroup = (index: number) => {\r\n        for (let group = 0; group < txnsToSign.length; group++) {\r\n          const groupLength = txnsToSign[group].length;\r\n          if (index < groupLength) {\r\n            return [group, index];\r\n          }\r\n\r\n          index -= groupLength;\r\n        }\r\n\r\n        throw new Error(`Index too large for groups: ${index}`);\r\n      };\r\n\r\n      const signedPartialTxns: Array<Array<Uint8Array | null>> = txnsToSign.map(() => []);\r\n      result.forEach((r, i) => {\r\n        const [group, groupIndex] = indexToGroup(i);\r\n        const toSign = txnsToSign[group][groupIndex];\r\n\r\n        if (r == null) {\r\n          if (toSign.signers !== undefined && toSign.signers?.length < 1) {\r\n            signedPartialTxns[group].push(null);\r\n            return;\r\n          }\r\n          throw new Error(`Transaction at index ${i}: was not signed when it should have been`);\r\n        }\r\n\r\n        if (toSign.signers !== undefined && toSign.signers?.length < 1) {\r\n          throw new Error(`Transaction at index ${i} was signed when it should not have been`);\r\n        }\r\n\r\n        const rawSignedTxn = Buffer.from(r, \"base64\");\r\n        signedPartialTxns[group].push(new Uint8Array(rawSignedTxn));\r\n      });\r\n\r\n      const signedTxns: Uint8Array[][] = signedPartialTxns.map(\r\n        (signedPartialTxnsInternal, group) => {\r\n          return signedPartialTxnsInternal.map((stxn, groupIndex) => {\r\n            if (stxn) {\r\n              return stxn;\r\n            }\r\n\r\n            return signTxnWithTestAccount(txnsToSign[group][groupIndex].txn);\r\n          });\r\n        },\r\n      );\r\n\r\n      const signedTxnInfo: Array<Array<{\r\n        txID: string;\r\n        signingAddress?: string;\r\n        signature: string;\r\n      } | null>> = signedPartialTxns.map((signedPartialTxnsInternal, group) => {\r\n        return signedPartialTxnsInternal.map((rawSignedTxn, i) => {\r\n          if (rawSignedTxn == null) {\r\n            return null;\r\n          }\r\n\r\n          const signedTxn = algosdk.decodeSignedTransaction(rawSignedTxn);\r\n          const txn = (signedTxn.txn as unknown) as algosdk.Transaction;\r\n          const txID = txn.txID();\r\n          const unsignedTxID = txnsToSign[group][i].txn.txID();\r\n\r\n          if (txID !== unsignedTxID) {\r\n            throw new Error(\r\n              `Signed transaction at index ${i} differs from unsigned transaction. Got ${txID}, expected ${unsignedTxID}`,\r\n            );\r\n          }\r\n\r\n          if (!signedTxn.sig) {\r\n            throw new Error(`Signature not present on transaction at index ${i}`);\r\n          }\r\n\r\n          return {\r\n            txID,\r\n            signingAddress: signedTxn.sgnr ? algosdk.encodeAddress(signedTxn.sgnr) : undefined,\r\n            signature: Buffer.from(signedTxn.sig).toString(\"base64\"),\r\n          };\r\n        });\r\n      });\r\n\r\n      console.log(\"Signed txn info:\", signedTxnInfo);\r\n\r\n      // format displayed result\r\n      const formattedResult: IResult = {\r\n        method: \"algo_signTxn\",\r\n        body: signedTxnInfo,\r\n      };\r\n\r\n      // display result\r\n      this.setState({\r\n        connector,\r\n        pendingRequest: false,\r\n        signedTxns,\r\n        result: formattedResult,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState({ connector, pendingRequest: false, result: null });\r\n    }\r\n  };\r\n\r\n  public async submitSignedTransaction() {\r\n    const { signedTxns, chain } = this.state;\r\n    if (signedTxns == null) {\r\n      throw new Error(\"Transactions to submit are null\");\r\n    }\r\n\r\n    this.setState({ pendingSubmissions: signedTxns.map(() => 0) });\r\n\r\n    signedTxns.forEach(async (signedTxn, index) => {\r\n      try {\r\n        const confirmedRound = await apiSubmitTransactions(chain, signedTxn);\r\n\r\n        this.setState(prevState => {\r\n          return {\r\n            pendingSubmissions: prevState.pendingSubmissions.map((v, i) => {\r\n              if (index === i) {\r\n                return confirmedRound;\r\n              }\r\n              return v;\r\n            }),\r\n          };\r\n        });\r\n\r\n        console.log(`Transaction confirmed at round ${confirmedRound}`);\r\n      } catch (err) {\r\n        this.setState(prevState => {\r\n          return {\r\n            pendingSubmissions: prevState.pendingSubmissions.map((v, i) => {\r\n              if (index === i) {\r\n                return err;\r\n              }\r\n              return v;\r\n            }),\r\n          };\r\n        });\r\n\r\n        console.error(`Error submitting transaction at index ${index}:`, err);\r\n      }\r\n    });\r\n  }\r\n\r\n  public render = () => {\r\n    const {\r\n      chain,\r\n      assets,\r\n      address,\r\n      connected,\r\n      fetching,\r\n      showModal,\r\n      pendingRequest,\r\n      pendingSubmissions,\r\n      result,\r\n    } = this.state;\r\n    return (\r\n      <SLayout>\r\n        <Column maxWidth={1000} spanHeight>\r\n          <Header\r\n            connected={connected}\r\n            address={address}\r\n            killSession={this.killSession}\r\n            chain={chain}\r\n            chainUpdate={this.chainUpdate}\r\n          />\r\n          <SContent>\r\n            {!address && !assets.length ? (\r\n              <SLanding center>\r\n                <h3>{`CIFI Mobile Integration`}</h3>\r\n                <SButtonContainer>\r\n                  <SConnectButton left onClick={this.walletConnectInit} fetching={fetching}>\r\n                    {\"Connect to WalletConnect\"}\r\n                  </SConnectButton>\r\n                </SButtonContainer>\r\n              </SLanding>\r\n            ) : (\r\n              <SBalances>\r\n                <h3>Balances</h3>\r\n                {!fetching ? (\r\n                  <AccountAssets assets={assets} />\r\n                ) : (\r\n                  <Column center>\r\n                    <SContainer>\r\n                      <Loader />\r\n                    </SContainer>\r\n                  </Column>\r\n                )}\r\n                <h3>Actions</h3>\r\n                <Column center>\r\n                  <STestButtonContainer>\r\n                    {scenarios.map(({ name, scenario }) => (\r\n                      <STestButton left key={name} onClick={() => this.signTxnScenario(scenario)}>\r\n                        {name}\r\n                      </STestButton>\r\n                    ))}\r\n                  </STestButtonContainer>\r\n                </Column>\r\n              </SBalances>\r\n            )}\r\n          </SContent>\r\n        </Column>\r\n        <Modal show={showModal} toggleModal={this.toggleModal}>\r\n          {pendingRequest ? (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Pending Call Request\"}</SModalTitle>\r\n              <SContainer>\r\n                <Loader />\r\n                <SModalParagraph>{\"Approve or reject request using your wallet\"}</SModalParagraph>\r\n              </SContainer>\r\n            </SModalContainer>\r\n          ) : result ? (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Call Request Approved\"}</SModalTitle>\r\n              <STable>\r\n                <SRow>\r\n                  <SKey>Method</SKey>\r\n                  <SValue>{result.method}</SValue>\r\n                </SRow>\r\n                {result.body.map((signedTxns, index) => (\r\n                  <SRow key={index}>\r\n                    <SKey>{`Atomic group ${index}`}</SKey>\r\n                    <SValue>\r\n                      {signedTxns.map((txn, txnIndex) => (\r\n                        <div key={txnIndex}>\r\n                          {!!txn?.txID && <p>TxID: {txn.txID}</p>}\r\n                          {!!txn?.signature && <p>Sig: {txn.signature}</p>}\r\n                          {!!txn?.signingAddress && <p>AuthAddr: {txn.signingAddress}</p>}\r\n                        </div>\r\n                      ))}\r\n                    </SValue>\r\n                  </SRow>\r\n                ))}\r\n              </STable>\r\n              <SModalButton\r\n                onClick={() => this.submitSignedTransaction()}\r\n                disabled={pendingSubmissions.length !== 0}\r\n              >\r\n                {\"Submit transaction to network.\"}\r\n              </SModalButton>\r\n              {pendingSubmissions.map((submissionInfo, index) => {\r\n                const key = `${index}:${\r\n                  typeof submissionInfo === \"number\" ? submissionInfo : \"err\"\r\n                }`;\r\n                const prefix = `Txn Group ${index}: `;\r\n                let content: string;\r\n\r\n                if (submissionInfo === 0) {\r\n                  content = \"Submitting...\";\r\n                } else if (typeof submissionInfo === \"number\") {\r\n                  content = `Confirmed at round ${submissionInfo}`;\r\n                } else {\r\n                  content = \"Rejected by network. See console for more information.\";\r\n                }\r\n\r\n                return <SModalTitle key={key}>{prefix + content}</SModalTitle>;\r\n              })}\r\n            </SModalContainer>\r\n          ) : (\r\n            <SModalContainer>\r\n              <SModalTitle>{\"Call Request Rejected\"}</SModalTitle>\r\n            </SModalContainer>\r\n          )}\r\n        </Modal>\r\n      </SLayout>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport styled, { keyframes } from \"styled-components\";\r\n\r\nconst fadeIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\ninterface IWrapperStyleProps {\r\n  center: boolean;\r\n}\r\n\r\nconst SWrapper = styled.div<IWrapperStyleProps>`\r\n  will-change: transform, opacity;\r\n  animation: ${fadeIn} 0.7s ease 0s normal 1;\r\n  min-height: 200px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: ${({ center }) => (center ? `center` : `flex-start`)};\r\n`;\r\n\r\ninterface IWrapperProps extends IWrapperStyleProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Wrapper = (props: IWrapperProps) => {\r\n  const { children, center } = props;\r\n  return (\r\n    <SWrapper {...props} center={center}>\r\n      {children}\r\n    </SWrapper>\r\n  );\r\n};\r\n\r\nWrapper.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  center: PropTypes.bool,\r\n};\r\n\r\nWrapper.defaultProps = {\r\n  center: false,\r\n};\r\n\r\nexport default Wrapper;\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { colors, transitions } from \"../styles\";\r\n\r\ninterface ILightboxStyleProps {\r\n  show: boolean;\r\n  offset: number;\r\n  opacity?: number;\r\n}\r\n\r\nconst SLightbox = styled.div<ILightboxStyleProps>`\r\n  transition: opacity 0.1s ease-in-out;\r\n  text-align: center;\r\n  position: absolute;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin-left: -50vw;\r\n  top: ${({ offset }) => (offset ? `-${offset}px` : 0)};\r\n  left: 50%;\r\n  z-index: 2;\r\n  will-change: opacity;\r\n  background-color: ${({ opacity }) => {\r\n    let alpha = 0.4;\r\n    if (typeof opacity === \"number\") {\r\n      alpha = opacity;\r\n    }\r\n    return `rgba(0, 0, 0, ${alpha})`;\r\n  }};\r\n  opacity: ${({ show }) => (show ? 1 : 0)};\r\n  visibility: ${({ show }) => (show ? \"visible\" : \"hidden\")};\r\n  pointer-events: ${({ show }) => (show ? \"auto\" : \"none\")};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst SModalContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst SHitbox = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n`;\r\n\r\ninterface ICloseButtonStyleProps {\r\n  size: number;\r\n  color: string;\r\n  onClick?: any;\r\n}\r\n\r\nconst SCloseButton = styled.div<ICloseButtonStyleProps>`\r\n  transition: ${transitions.short};\r\n  position: absolute;\r\n  width: ${({ size }) => `${size}px`};\r\n  height: ${({ size }) => `${size}px`};\r\n  right: ${({ size }) => `${size / 1.6667}px`};\r\n  top: ${({ size }) => `${size / 1.6667}px`};\r\n  opacity: 0.5;\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n  &:before,\r\n  &:after {\r\n    position: absolute;\r\n    content: \" \";\r\n    height: ${({ size }) => `${size}px`};\r\n    width: 2px;\r\n    background: ${({ color }) => `rgb(${colors[color]})`};\r\n  }\r\n  &:before {\r\n    transform: rotate(45deg);\r\n  }\r\n  &:after {\r\n    transform: rotate(-45deg);\r\n  }\r\n`;\r\n\r\nconst SCard = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  max-width: 500px;\r\n  padding: 25px;\r\n  background-color: rgb(${colors.white});\r\n  border-radius: 6px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst SModalContent = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  position: relative;\r\n  word-wrap: break-word;\r\n`;\r\n\r\ninterface IModalState {\r\n  offset: number;\r\n}\r\n\r\ninterface IModalProps {\r\n  children: React.ReactNode;\r\n  show: boolean;\r\n  toggleModal: any;\r\n  opacity?: number;\r\n}\r\n\r\nconst INITIAL_STATE: IModalState = {\r\n  offset: 0,\r\n};\r\n\r\nclass Modal extends React.Component<IModalProps, IModalState> {\r\n  public static propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    show: PropTypes.bool.isRequired,\r\n    toggleModal: PropTypes.func.isRequired,\r\n    opacity: PropTypes.number,\r\n  };\r\n\r\n  public lightbox?: HTMLDivElement | null;\r\n\r\n  public state: IModalState = {\r\n    ...INITIAL_STATE,\r\n  };\r\n\r\n  public componentDidUpdate() {\r\n    if (this.lightbox) {\r\n      const lightboxRect = this.lightbox.getBoundingClientRect();\r\n      const offset = lightboxRect.top > 0 ? lightboxRect.top : 0;\r\n\r\n      if (offset !== INITIAL_STATE.offset && offset !== this.state.offset) {\r\n        this.setState({ offset });\r\n      }\r\n    }\r\n  }\r\n\r\n  public toggleModal = async () => {\r\n    const d = typeof window !== \"undefined\" ? document : \"\";\r\n    const body = d ? d.body || d.getElementsByTagName(\"body\")[0] : \"\";\r\n    if (body) {\r\n      if (this.props.show) {\r\n        body.style.position = \"\";\r\n      } else {\r\n        body.style.position = \"fixed\";\r\n      }\r\n    }\r\n    this.props.toggleModal();\r\n  };\r\n\r\n  public render() {\r\n    const { offset } = this.state;\r\n    const { children, show, opacity } = this.props;\r\n    return (\r\n      <SLightbox show={show} offset={offset} opacity={opacity} ref={c => (this.lightbox = c)}>\r\n        <SModalContainer>\r\n          <SHitbox onClick={this.toggleModal} />\r\n\r\n          <SCard>\r\n            <SCloseButton size={25} color={\"dark\"} onClick={this.toggleModal} />\r\n            <SModalContent>{children}</SModalContent>\r\n          </SCard>\r\n        </SModalContainer>\r\n      </SLightbox>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","module.exports = __webpack_public_path__ + \"static/media/algo.6c6f52b0.svg\";","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IIconStyleProps {\r\n  size: number;\r\n}\r\n\r\nconst SIcon = styled.img<IIconStyleProps>`\r\n  width: ${({ size }) => `${size}px`};\r\n  height: ${({ size }) => `${size}px`};\r\n`;\r\n\r\nconst Icon = (props: any) => {\r\n  const { src, fallback, size } = props;\r\n  return (\r\n    <SIcon\r\n      {...props}\r\n      src={src}\r\n      size={size}\r\n      onError={(event: any) => {\r\n        if (fallback) {\r\n          event.target.src = fallback;\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  src: PropTypes.string,\r\n  fallback: PropTypes.string,\r\n  size: PropTypes.number,\r\n};\r\n\r\nIcon.defaultProps = {\r\n  src: null,\r\n  fallback: \"\",\r\n  size: 20,\r\n};\r\n\r\nexport default Icon;\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport Icon from \"./Icon\";\r\n\r\nconst ASAIcon = (props: { assetID: number }) => {\r\n  const src = `https://algoexplorer.io/images/assets/big/light/${props.assetID}.png`;\r\n  return <Icon src={src} />;\r\n};\r\n\r\nASAIcon.propTypes = {\r\n  assetID: PropTypes.number,\r\n  size: PropTypes.number,\r\n};\r\n\r\nASAIcon.defaultProps = {\r\n  assetID: 0,\r\n  size: 20,\r\n};\r\n\r\nexport default ASAIcon;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Icon from \"./Icon\";\r\nimport ASAIcon from \"./ASAIcon\";\r\nimport algo from \"../assets/algo.svg\";\r\nimport { formatBigNumWithDecimals } from \"../helpers/utilities\";\r\nimport { IAssetData } from \"../helpers/types\";\r\n\r\nconst SAssetRow = styled.div`\r\n  width: 100%;\r\n  padding: 20px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nconst SAssetRowLeft = styled.div`\r\n  display: flex;\r\n`;\r\nconst SAssetName = styled.div`\r\n  display: flex;\r\n  margin-left: 10px;\r\n`;\r\nconst SAssetRowRight = styled.div`\r\n  display: flex;\r\n`;\r\nconst SAssetBalance = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst AssetRow = (props: { asset: IAssetData }) => {\r\n  const { asset } = props;\r\n  const nativeCurrencyIcon = asset.id === 0 ? algo : null;\r\n  return (\r\n    <SAssetRow {...props}>\r\n      <SAssetRowLeft>\r\n        {nativeCurrencyIcon ? <Icon src={nativeCurrencyIcon} /> : <ASAIcon assetID={asset.id} />}\r\n        <SAssetName>{asset.name}</SAssetName>\r\n      </SAssetRowLeft>\r\n      <SAssetRowRight>\r\n        <SAssetBalance>\r\n          {`${formatBigNumWithDecimals(asset.amount, asset.decimals)} ${asset.unitName || \"units\"}`}\r\n        </SAssetBalance>\r\n      </SAssetRowRight>\r\n    </SAssetRow>\r\n  );\r\n};\r\n\r\nexport default AssetRow;\r\n","import * as React from \"react\";\r\nimport Column from \"./Column\";\r\nimport AssetRow from \"./AssetRow\";\r\nimport { IAssetData } from \"../helpers/types\";\r\n\r\nconst AccountAssets = (props: { assets: IAssetData[] }) => {\r\n  const { assets } = props;\r\n\r\n  const nativeCurrency = assets.find((asset: IAssetData) => asset && asset.id === 0) || {\r\n    id: 0,\r\n    amount: BigInt(0),\r\n    creator: \"\",\r\n    frozen: false,\r\n    decimals: 6,\r\n    name: \"Algo\",\r\n    unitName: \"Algo\",\r\n  };\r\n\r\n  const tokens = assets.filter((asset: IAssetData) => asset && asset.id !== 0);\r\n\r\n  return (\r\n    <Column center>\r\n      <AssetRow key={nativeCurrency.id} asset={nativeCurrency} />\r\n      {tokens.map(token => (\r\n        <AssetRow key={token.id} asset={token} />\r\n      ))}\r\n    </Column>\r\n  );\r\n};\r\n\r\nexport default AccountAssets;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IBlockieStyleProps {\r\n  size?: number;\r\n}\r\n\r\ninterface IBlockieProps extends IBlockieStyleProps {\r\n  address: string;\r\n}\r\n\r\nconst SBlockieWrapper = styled.div<IBlockieStyleProps>`\r\n  width: ${({ size }) => `${size}px`};\r\n  height: ${({ size }) => `${size}px`};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 6px;\r\n  overflow: hidden;\r\n  & img {\r\n    width: 100%;\r\n  }\r\n`;\r\n\r\nconst Blockie = (props: IBlockieProps) => {\r\n  const seed = props.address.toLowerCase() || \"\";\r\n  const imgUrl = window.blockies\r\n    .create({\r\n      seed,\r\n    })\r\n    .toDataURL();\r\n  return (\r\n    <SBlockieWrapper {...props} size={props.size}>\r\n      <img src={imgUrl} alt={props.address} />\r\n    </SBlockieWrapper>\r\n  );\r\n};\r\n\r\nBlockie.defaultProps = {\r\n  address: \"0x0000000000000000000000000000000000000000\",\r\n  size: 30,\r\n};\r\n\r\nexport default Blockie;\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport Blockie from \"./Blockie\";\r\nimport { ellipseAddress } from \"../helpers/utilities\";\r\nimport { transitions } from \"../styles\";\r\nimport { ChainType } from \"src/helpers/api\";\r\n\r\nconst SHeader = styled.div`\r\n  margin-top: -1px;\r\n  margin-bottom: 1px;\r\n  width: 100%;\r\n  height: 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 16px;\r\n`;\r\n\r\nconst SActiveAccount = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst SActiveChain = styled(SActiveAccount as any)`\r\n  flex-direction: column;\r\n  text-align: left;\r\n  align-items: flex-start;\r\n  & p {\r\n    font-size: 0.8em;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  & p:nth-child(2) {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst SBlockie = styled(Blockie as any)`\r\n  margin-right: 10px;\r\n`;\r\n\r\ninterface IHeaderStyle {\r\n  connected: boolean;\r\n}\r\n\r\nconst SAddress = styled.p<IHeaderStyle>`\r\n  transition: ${transitions.base};\r\n  font-weight: bold;\r\n  margin: ${({ connected }) => (connected ? \"-2px auto 0.7em\" : \"0\")};\r\n`;\r\n\r\nconst SDisconnect = styled.div<IHeaderStyle>`\r\n  transition: ${transitions.button};\r\n  font-size: 12px;\r\n  font-family: monospace;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 20px;\r\n  opacity: 0.7;\r\n  cursor: pointer;\r\n\r\n  opacity: ${({ connected }) => (connected ? 1 : 0)};\r\n  visibility: ${({ connected }) => (connected ? \"visible\" : \"hidden\")};\r\n  pointer-events: ${({ connected }) => (connected ? \"auto\" : \"none\")};\r\n\r\n  &:hover {\r\n    transform: translateY(-1px);\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\ninterface IHeaderProps {\r\n  killSession: () => unknown;\r\n  connected: boolean;\r\n  address: string;\r\n  chain: ChainType;\r\n  chainUpdate: (newChain: ChainType) => unknown;\r\n}\r\n\r\nfunction stringToChainType(s: string): ChainType {\r\n  switch (s) {\r\n    case ChainType.MainNet.toString():\r\n      return ChainType.MainNet;\r\n    case ChainType.TestNet.toString():\r\n      return ChainType.TestNet;\r\n    default:\r\n      throw new Error(`Unknown chain selected: ${s}`);\r\n  }\r\n}\r\n\r\nconst Header = (props: IHeaderProps) => {\r\n  const { connected, address, killSession } = props;\r\n  return (\r\n    <SHeader {...props}>\r\n      {connected && (\r\n        <SActiveChain>\r\n          <p>\r\n            {`Connected to `}\r\n            <select\r\n              onChange={event => props.chainUpdate(stringToChainType(event.target.value))}\r\n              value={props.chain}\r\n            >\r\n              <option value={ChainType.TestNet}>Algorand TestNet</option>\r\n              <option value={ChainType.MainNet}>Algorand MainNet</option>\r\n            </select>\r\n          </p>\r\n        </SActiveChain>\r\n      )}\r\n      {address && (\r\n        <SActiveAccount>\r\n          <SBlockie address={address} />\r\n          <SAddress connected={connected}>{ellipseAddress(address)}</SAddress>\r\n          <SDisconnect connected={connected} onClick={killSession}>\r\n            {\"Disconnect\"}\r\n          </SDisconnect>\r\n        </SActiveAccount>\r\n      )}\r\n    </SHeader>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  killSession: PropTypes.func.isRequired,\r\n  address: PropTypes.string,\r\n};\r\n\r\nexport default Header;\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nimport App from \"./App\";\r\nimport { globalStyle } from \"./styles\";\r\nconst GlobalStyle = createGlobalStyle`\r\n  ${globalStyle}\r\n`;\r\n\r\ndeclare global {\r\n  // tslint:disable-next-line\r\n  interface Window {\r\n    blockies: any;\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <GlobalStyle />\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\"),\r\n);\r\n","import algosdk from \"algosdk\";\r\nimport { IAssetData } from \"./types\";\r\n\r\nexport enum ChainType {\r\n  MainNet = \"mainnet\",\r\n  TestNet = \"testnet\",\r\n}\r\n\r\nconst mainNetClient = new algosdk.Algodv2(\"\", \"https://algoexplorerapi.io\", \"\");\r\nconst testNetClient = new algosdk.Algodv2(\"\", \"https://testnet.algoexplorerapi.io\", \"\");\r\n\r\nfunction clientForChain(chain: ChainType): algosdk.Algodv2 {\r\n  switch (chain) {\r\n    case ChainType.MainNet:\r\n      return mainNetClient;\r\n    case ChainType.TestNet:\r\n      return testNetClient;\r\n    default:\r\n      throw new Error(`Unknown chain type: ${chain}`);\r\n  }\r\n}\r\n\r\nexport async function apiGetAccountAssets(\r\n  chain: ChainType,\r\n  address: string,\r\n): Promise<IAssetData[]> {\r\n  const client = clientForChain(chain);\r\n\r\n  const accountInfo = await client\r\n    .accountInformation(address)\r\n    .setIntDecoding(algosdk.IntDecoding.BIGINT)\r\n    .do();\r\n\r\n  const algoBalance = accountInfo.amount as bigint;\r\n  const assetsFromRes: Array<{\r\n    \"asset-id\": bigint;\r\n    amount: bigint;\r\n    creator: string;\r\n    frozen: boolean;\r\n  }> = accountInfo.assets;\r\n\r\n  const assets: IAssetData[] = assetsFromRes.map(({ \"asset-id\": id, amount, creator, frozen }) => ({\r\n    id: Number(id),\r\n    amount,\r\n    creator,\r\n    frozen,\r\n    decimals: 0,\r\n  }));\r\n\r\n  assets.sort((a, b) => a.id - b.id);\r\n\r\n  await Promise.all(\r\n    assets.map(async asset => {\r\n      const { params } = await client.getAssetByID(asset.id).do();\r\n      asset.name = params.name;\r\n      asset.unitName = params[\"unit-name\"];\r\n      asset.url = params.url;\r\n      asset.decimals = params.decimals;\r\n    }),\r\n  );\r\n\r\n  assets.unshift({\r\n    id: 0,\r\n    amount: algoBalance,\r\n    creator: \"\",\r\n    frozen: false,\r\n    decimals: 6,\r\n    name: \"Algo\",\r\n    unitName: \"Algo\",\r\n  });\r\n\r\n  return assets;\r\n}\r\n\r\nexport async function apiGetTxnParams(chain: ChainType): Promise<algosdk.SuggestedParams> {\r\n  const params = await clientForChain(chain)\r\n    .getTransactionParams()\r\n    .do();\r\n  return params;\r\n}\r\n\r\nexport async function apiSubmitTransactions(\r\n  chain: ChainType,\r\n  stxns: Uint8Array[],\r\n): Promise<number> {\r\n  const { txId } = await clientForChain(chain)\r\n    .sendRawTransaction(stxns)\r\n    .do();\r\n  return await waitForTransaction(chain, txId);\r\n}\r\n\r\nasync function waitForTransaction(chain: ChainType, txId: string): Promise<number> {\r\n  const client = clientForChain(chain);\r\n\r\n  let lastStatus = await client.status().do();\r\n  let lastRound = lastStatus[\"last-round\"];\r\n  while (true) {\r\n    const status = await client.pendingTransactionInformation(txId).do();\r\n    if (status[\"pool-error\"]) {\r\n      throw new Error(`Transaction Pool Error: ${status[\"pool-error\"]}`);\r\n    }\r\n    if (status[\"confirmed-round\"]) {\r\n      return status[\"confirmed-round\"];\r\n    }\r\n    lastStatus = await client.statusAfterBlock(lastRound + 1).do();\r\n    lastRound = lastStatus[\"last-round\"];\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface IColumnStyleProps {\r\n  spanHeight: boolean;\r\n  maxWidth: number;\r\n  center: boolean;\r\n}\r\n\r\ninterface IColumnProps extends IColumnStyleProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst SColumn = styled.div<IColumnStyleProps>`\r\n  position: relative;\r\n  width: 100%;\r\n  height: ${({ spanHeight }) => (spanHeight ? \"100%\" : \"auto\")};\r\n  max-width: ${({ maxWidth }) => `${maxWidth}px`};\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: ${({ center }) => (center ? \"center\" : \"flex-start\")};\r\n`;\r\n\r\nconst Column = (props: IColumnProps) => {\r\n  const { children, spanHeight, maxWidth, center } = props;\r\n  return (\r\n    <SColumn {...props} spanHeight={spanHeight} maxWidth={maxWidth} center={center}>\r\n      {children}\r\n    </SColumn>\r\n  );\r\n};\r\n\r\nColumn.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  spanHeight: PropTypes.bool,\r\n  maxWidth: PropTypes.number,\r\n  center: PropTypes.bool,\r\n};\r\n\r\nColumn.defaultProps = {\r\n  spanHeight: false,\r\n  maxWidth: 600,\r\n  center: false,\r\n};\r\n\r\nexport default Column;\r\n","import * as React from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\nimport styled, { keyframes } from \"styled-components\";\r\nimport { colors } from \"../styles\";\r\n\r\nconst load = keyframes`\r\n  0% {\r\n    transform: scale(1.0);\r\n  }\r\n  5% {\r\n    transform: scale(1.0);\r\n  }\r\n  50% {\r\n    transform: scale(0.8);\r\n  }\r\n  95% {\r\n    transform: scale(1.0);\r\n  }\r\n  100% {\r\n    transform: scale(1.0);\r\n  }\r\n`;\r\n\r\ninterface ILoaderStyleProps {\r\n  size: number;\r\n}\r\n\r\ninterface ILoaderProps extends ILoaderStyleProps {\r\n  color: string;\r\n}\r\n\r\nconst SLoader = styled.svg<ILoaderStyleProps>`\r\n  width: ${({ size }) => `${size}px`};\r\n  height: ${({ size }) => `${size}px`};\r\n  animation: ${load} 1s infinite cubic-bezier(0.25, 0, 0.75, 1);\r\n  transform: translateZ(0);\r\n`;\r\n\r\nconst Loader = (props: ILoaderProps) => {\r\n  const { size, color } = props;\r\n  const rgb = `rgb(${colors[color]})`;\r\n  return (\r\n    <SLoader viewBox=\"0 0 186 187\" size={size}>\r\n      <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n        <path\r\n          d=\"M60,10.34375 C32.3857625,10.34375 10,32.7295125 10,60.34375 L10,126.34375 C10,153.957987 32.3857625,176.34375 60,176.34375 L126,176.34375 C153.614237,176.34375 176,153.957987 176,126.34375 L176,60.34375 C176,32.7295125 153.614237,10.34375 126,10.34375 L60,10.34375 Z M60,0.34375 L126,0.34375 C159.137085,0.34375 186,27.206665 186,60.34375 L186,126.34375 C186,159.480835 159.137085,186.34375 126,186.34375 L60,186.34375 C26.862915,186.34375 0,159.480835 0,126.34375 L0,60.34375 C0,27.206665 26.862915,0.34375 60,0.34375 Z\"\r\n          id=\"Rectangle-Copy\"\r\n          fill={rgb}\r\n          fillRule=\"nonzero\"\r\n        />\r\n        <rect id=\"Rectangle\" fill={rgb} x=\"44\" y=\"44.34375\" width=\"98\" height=\"98\" rx=\"35\" />\r\n      </g>\r\n    </SLoader>\r\n  );\r\n};\r\n\r\nLoader.propTypes = {\r\n  size: PropTypes.number,\r\n  color: PropTypes.string,\r\n};\r\n\r\nLoader.defaultProps = {\r\n  size: 40,\r\n  color: \"lightBlue\",\r\n};\r\n\r\nexport default Loader;\r\n","export function capitalize(string: string): string {\r\n  return string\r\n    .split(\" \")\r\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n    .join(\" \");\r\n}\r\n\r\nexport function ellipseText(text = \"\", maxLength = 9999): string {\r\n  if (text.length <= maxLength) {\r\n    return text;\r\n  }\r\n  const _maxLength = maxLength - 3;\r\n  let ellipse = false;\r\n  let currentLength = 0;\r\n  const result =\r\n    text\r\n      .split(\" \")\r\n      .filter(word => {\r\n        currentLength += word.length;\r\n        if (ellipse || currentLength >= _maxLength) {\r\n          ellipse = true;\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n      })\r\n      .join(\" \") + \"...\";\r\n  return result;\r\n}\r\n\r\nexport function ellipseAddress(address = \"\", width = 6): string {\r\n  return `${address.slice(0, width)}...${address.slice(-width)}`;\r\n}\r\n\r\nexport function padLeft(n: string, width: number, z?: string): string {\r\n  z = z || \"0\";\r\n  n = n + \"\";\r\n  return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n}\r\n\r\nexport function sanitizeHex(hex: string): string {\r\n  hex = hex.substring(0, 2) === \"0x\" ? hex.substring(2) : hex;\r\n  if (hex === \"\") {\r\n    return \"\";\r\n  }\r\n  hex = hex.length % 2 !== 0 ? \"0\" + hex : hex;\r\n  return \"0x\" + hex;\r\n}\r\n\r\nexport function removeHexPrefix(hex: string): string {\r\n  return hex.toLowerCase().replace(\"0x\", \"\");\r\n}\r\n\r\nexport function getDataString(func: string, arrVals: any[]): string {\r\n  let val = \"\";\r\n  for (let i = 0; i < arrVals.length; i++) {\r\n    val += padLeft(arrVals[i], 64);\r\n  }\r\n  const data = func + val;\r\n  return data;\r\n}\r\n\r\nexport function isMobile(): boolean {\r\n  let mobile = false;\r\n\r\n  function hasTouchEvent(): boolean {\r\n    try {\r\n      document.createEvent(\"TouchEvent\");\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  function hasMobileUserAgent(): boolean {\r\n    if (\r\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(\r\n        navigator.userAgent,\r\n      ) ||\r\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\r\n        navigator.userAgent.substr(0, 4),\r\n      )\r\n    ) {\r\n      return true;\r\n    } else if (hasTouchEvent()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  mobile = hasMobileUserAgent();\r\n\r\n  return mobile;\r\n}\r\n\r\nexport function formatBigNumWithDecimals(num: bigint, decimals: number): string {\r\n  const singleUnit = BigInt(\"1\" + \"0\".repeat(decimals));\r\n  const wholeUnits = num / singleUnit;\r\n  const fractionalUnits = num % singleUnit;\r\n\r\n  return wholeUnits.toString() + \".\" + fractionalUnits.toString().padStart(decimals, \"0\");\r\n}\r\n","import * as React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Loader from \"./Loader\";\r\nimport { colors, fonts, shadows, transitions } from \"../styles\";\r\n\r\ninterface IButtonStyleProps {\r\n  fetching: boolean;\r\n  outline: boolean;\r\n  type: \"button\" | \"submit\" | \"reset\";\r\n  color: string;\r\n  disabled: boolean;\r\n  icon: any;\r\n  left: boolean;\r\n}\r\n\r\ninterface IButtonProps extends IButtonStyleProps {\r\n  children: React.ReactNode;\r\n  onClick?: any;\r\n}\r\n\r\nconst SIcon = styled.div`\r\n  position: absolute;\r\n  height: 15px;\r\n  width: 15px;\r\n  margin: 0 8px;\r\n  top: calc((100% - 15px) / 2);\r\n`;\r\n\r\nconst SHoverLayer = styled.div`\r\n  transition: ${transitions.button};\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: rgb(${colors.white}, 0.1);\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  left: 0;\r\n  pointer-events: none;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n`;\r\n\r\nconst SButton = styled.button<IButtonStyleProps>`\r\n  transition: ${transitions.button};\r\n  position: relative;\r\n  border: none;\r\n  border-style: none;\r\n  box-sizing: border-box;\r\n  background-color: ${({ outline, color }) => (outline ? \"transparent\" : `rgb(${colors[color]})`)};\r\n  border: ${({ outline, color }) => (outline ? `1px solid rgb(${colors[color]})` : \"none\")};\r\n  color: ${({ outline, color }) => (outline ? `rgb(${colors[color]})` : `rgb(${colors.white})`)};\r\n  box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\r\n  border-radius: 8px;\r\n  font-size: ${fonts.size.medium};\r\n  font-weight: ${fonts.weight.semibold};\r\n  padding: ${({ icon, left }) =>\r\n    icon ? (left ? \"7px 12px 8px 28px\" : \"7px 28px 8px 12px\") : \"8px 12px\"};\r\n  cursor: ${({ disabled }) => (disabled ? \"auto\" : \"pointer\")};\r\n  will-change: transform;\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\r\n  }\r\n\r\n  @media (hover: hover) {\r\n    &:hover {\r\n      transform: ${({ disabled }) => (!disabled ? \"translateY(-1px)\" : \"none\")};\r\n      box-shadow: ${({ disabled, outline }) =>\r\n        !disabled ? (outline ? \"none\" : `${shadows.hover}`) : `${shadows.soft}`};\r\n    }\r\n\r\n    &:hover ${SHoverLayer} {\r\n      opacity: 1;\r\n      visibility: visible;\r\n    }\r\n  }\r\n\r\n  &:active {\r\n    transform: ${({ disabled }) => (!disabled ? \"translateY(1px)\" : \"none\")};\r\n    box-shadow: ${({ outline }) => (outline ? \"none\" : `${shadows.soft}`)};\r\n    color: ${({ outline, color }) =>\r\n      outline ? `rgb(${colors[color]})` : `rgba(${colors.white}, 0.24)`};\r\n\r\n    & ${SIcon} {\r\n      opacity: 0.8;\r\n    }\r\n  }\r\n\r\n  & ${SIcon} {\r\n    right: ${({ left }) => (left ? \"auto\" : \"0\")};\r\n    left: ${({ left }) => (left ? \"0\" : \"auto\")};\r\n    display: ${({ icon }) => (icon ? \"block\" : \"none\")};\r\n    mask: ${({ icon }) => (icon ? `url(${icon}) center no-repeat` : \"none\")};\r\n    background-color: ${({ outline, color }) =>\r\n      outline ? `rgb(${colors[color]})` : `rgb(${colors.white})`};\r\n    transition: 0.15s ease;\r\n  }\r\n`;\r\n\r\nconst Button = (props: IButtonProps) => (\r\n  <SButton\r\n    {...props}\r\n    type={props.type}\r\n    outline={props.outline}\r\n    color={props.color}\r\n    disabled={props.disabled}\r\n    icon={props.icon}\r\n    left={props.left}\r\n  >\r\n    <SHoverLayer />\r\n    <SIcon />\r\n    {props.fetching ? <Loader size={20} color=\"white\" /> : props.children}\r\n  </SButton>\r\n);\r\n\r\nButton.defaultProps = {\r\n  fetching: false,\r\n  outline: false,\r\n  type: \"button\",\r\n  color: \"lightBlue\",\r\n  disabled: false,\r\n  icon: null,\r\n  left: false,\r\n};\r\n\r\nexport default Button;\r\n","export const colors = {\r\n  white: \"255, 255, 255\",\r\n  black: \"0, 0, 0\",\r\n  dark: \"12, 12, 13\",\r\n  grey: \"169, 169, 188\",\r\n  darkGrey: \"113, 119, 138\",\r\n  lightGrey: \"212, 212, 212\",\r\n  blue: \"101, 127, 230\",\r\n  lightBlue: \"64, 153, 255\",\r\n  yellow: \"250, 188, 45\",\r\n  orange: \"246, 133, 27\",\r\n  green: \"84, 209, 146\",\r\n  pink: \"255, 51, 102\",\r\n  red: \"214, 75, 71\",\r\n  purple: \"110, 107, 233\",\r\n};\r\n\r\nexport const fonts = {\r\n  size: {\r\n    tiny: \"10px\",\r\n    small: \"14px\",\r\n    medium: \"16px\",\r\n    large: \"18px\",\r\n    h1: \"60px\",\r\n    h2: \"50px\",\r\n    h3: \"40px\",\r\n    h4: \"32px\",\r\n    h5: \"24px\",\r\n    h6: \"20px\",\r\n  },\r\n  weight: {\r\n    normal: 400,\r\n    medium: 500,\r\n    semibold: 600,\r\n    bold: 700,\r\n    extrabold: 800,\r\n  },\r\n  family: {\r\n    OpenSans: `\"Open Sans\", sans-serif`,\r\n  },\r\n};\r\n\r\nexport const transitions = {\r\n  short: \"all 0.1s ease-in-out\",\r\n  base: \"all 0.2s ease-in-out\",\r\n  long: \"all 0.3s ease-in-out\",\r\n  button: \"all 0.15s ease-in-out\",\r\n};\r\n\r\nexport const shadows = {\r\n  soft:\r\n    \"0 4px 6px 0 rgba(50, 50, 93, 0.11), 0 1px 3px 0 rgba(0, 0, 0, 0.08), inset 0 0 1px 0 rgba(0, 0, 0, 0.06)\",\r\n  medium:\r\n    \"0 3px 6px 0 rgba(0, 0, 0, 0.06), 0 0 1px 0 rgba(50, 50, 93, 0.02), 0 5px 10px 0 rgba(59, 59, 92, 0.08)\",\r\n  big: \"0 15px 35px 0 rgba(50, 50, 93, 0.06), 0 5px 15px 0 rgba(50, 50, 93, 0.15)\",\r\n  hover:\r\n    \"0 7px 14px 0 rgba(50, 50, 93, 0.1), 0 3px 6px 0 rgba(0, 0, 0, 0.08), inset 0 0 1px 0 rgba(0, 0, 0, 0.06)\",\r\n};\r\n\r\nexport const responsive = {\r\n  xs: {\r\n    min: \"min-width: 467px\",\r\n    max: \"max-width: 468px\",\r\n  },\r\n  sm: {\r\n    min: \"min-width: 639px\",\r\n    max: \"max-width: 640px\",\r\n  },\r\n  md: {\r\n    min: \"min-width: 959px\",\r\n    max: \"max-width: 960px\",\r\n  },\r\n  lg: {\r\n    min: \"min-width: 1023px\",\r\n    max: \"max-width: 1024px\",\r\n  },\r\n  xl: {\r\n    min: \"min-width: 1399px\",\r\n    max: \"max-width: 1400px\",\r\n  },\r\n};\r\n\r\nexport const globalStyle = `\r\n\r\n  html, body, #root {\r\n    height: 100%;\r\n    width: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  body {\r\n    font-family: ${fonts.family.OpenSans};\r\n    font-style: normal;\r\n    font-stretch: normal;\r\n    font-weight: ${fonts.weight.normal};\r\n    font-size: ${fonts.size.medium};\r\n    background-color: rgb(${colors.white});\r\n    color: rgb(${colors.dark});\r\n    overflow-y:auto;\r\n    text-rendering: optimizeLegibility;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n  \t-webkit-text-size-adjust: 100%;\r\n    -webkit-overflow-scrolling: touch;\r\n    -ms-text-size-adjust: 100%;\r\n    -webkit-text-size-adjust: 100%;  \r\n  }\r\n\r\n  button {\r\n    border-style: none;\r\n    line-height: 1em;\r\n    background-image: none;\r\n    outline: 0;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n  }\r\n\r\n  [tabindex] {\r\n    outline: none;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  a, p, h1, h2, h3, h4, h5, h6 {\r\n  \ttext-decoration: none;\r\n  \tmargin: 0;\r\n    padding: 0;\r\n    margin: 0.7em 0;\r\n  }\r\n\r\n  h1 {\r\n    font-size: ${fonts.size.h1}\r\n  }\r\n  h2 {\r\n    font-size: ${fonts.size.h2}\r\n  }\r\n  h3 {\r\n    font-size: ${fonts.size.h3}\r\n  }\r\n  h4 {\r\n    font-size: ${fonts.size.h4}\r\n  }\r\n  h5 {\r\n    font-size: ${fonts.size.h5}\r\n  }\r\n  h6 {\r\n    font-size: ${fonts.size.h6}\r\n  }\r\n\r\n  a {\r\n    background-color: transparent;\r\n    -webkit-text-decoration-skip: objects;  \r\n    text-decoration: none;\r\n    color: inherit;\r\n    outline: none;\r\n  }\r\n\r\n  b,\r\n  strong {\r\n    font-weight: inherit;\r\n    font-weight: bolder;\r\n  }\r\n\r\n  ul, li {\r\n  \tlist-style: none;\r\n  \tmargin: 0;\r\n  \tpadding: 0;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box !important;\r\n  }\r\n\r\n\r\n  input {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  article,\r\n  aside,\r\n  details,\r\n  figcaption,\r\n  figure,\r\n  footer,\r\n  header,\r\n  main,\r\n  menu,\r\n  nav,\r\n  section,\r\n  summary {\r\n    display: block;\r\n  }\r\n  audio,\r\n  canvas,\r\n  progress,\r\n  video {\r\n    display: inline-block;\r\n  }\r\n\r\n  input[type=\"color\"],\r\n  input[type=\"date\"],\r\n  input[type=\"datetime\"],\r\n  input[type=\"datetime-local\"],\r\n  input[type=\"email\"],\r\n  input[type=\"month\"],\r\n  input[type=\"number\"],\r\n  input[type=\"password\"],\r\n  input[type=\"search\"],\r\n  input[type=\"tel\"],\r\n  input[type=\"text\"],\r\n  input[type=\"time\"],\r\n  input[type=\"url\"],\r\n  input[type=\"week\"],\r\n  select:focus,\r\n  textarea {\r\n    font-size: 16px;\r\n  }\r\n`;\r\n","import algosdk from \"algosdk\";\r\nimport { apiGetTxnParams, ChainType } from \"./helpers/api\";\r\n\r\nconst testAccounts = [\r\n  algosdk.mnemonicToSecretKey(\r\n    \"unique urban normal exchange shrimp inspire steel domain family cheap sea river input credit embark day organ dune try squeeze subject trial can about fault\",\r\n  ),\r\n  algosdk.mnemonicToSecretKey(\r\n    \"leisure pigeon pottery save camera nephew drift unhappy fine town leave nasty mixed soup frog warrior flush save flame bottom senior muffin ship above excite\",\r\n  ),\r\n  algosdk.mnemonicToSecretKey(\r\n    \"empower twist carpet lawsuit across tape add leopard prevent abandon squeeze egg clown river funny sea labor level scheme race crime mystery party absent exist\",\r\n  ),\r\n];\r\n\r\nexport function signTxnWithTestAccount(txn: algosdk.Transaction): Uint8Array {\r\n  const sender = algosdk.encodeAddress(txn.from.publicKey);\r\n\r\n  for (const testAccount of testAccounts) {\r\n    if (testAccount.addr === sender) {\r\n      return txn.signTxn(testAccount.sk);\r\n    }\r\n  }\r\n\r\n  throw new Error(`Cannot sign transaction from unknown test account: ${sender}`);\r\n}\r\n\r\nexport interface IScenarioTxn {\r\n  txn: algosdk.Transaction;\r\n  signers?: string[];\r\n  authAddr?: string;\r\n  message?: string;\r\n}\r\n\r\nexport type ScenarioReturnType = IScenarioTxn[][];\r\n\r\nexport type Scenario = (chain: ChainType, address: string) => Promise<ScenarioReturnType>;\r\n\r\nexport enum AssetTransactionType {\r\n  Transfer = \"asset-transfer\",\r\n  OptIn = \"asset-opt-in\",\r\n  Close = \"asset-close\",\r\n}\r\n\r\n// function getAssetIndex(chain: ChainType, type: AssetTransactionType): number {\r\n//   if (chain === ChainType.MainNet) {\r\n//     if (type === AssetTransactionType.Transfer) {\r\n//       return 604; // IanCoin\r\n//     } else if (type === AssetTransactionType.Close) {\r\n//       return 672; // RotemCoin\r\n//     } else {\r\n//       return 312769; // Tether USDt\r\n//     }\r\n//   }\r\n\r\n//   if (type === AssetTransactionType.Transfer) {\r\n//     return 11711; // HipoCoin\r\n//   } else if (type === AssetTransactionType.Close) {\r\n//     return 180132; // testasset2\r\n//   } else {\r\n//     return 135270; // Turkish Lira\r\n//   }\r\n// }\r\n\r\n// function getAppIndex(chain: ChainType): number {\r\n//   if (chain === ChainType.MainNet) {\r\n//     return 305162725;\r\n//   }\r\n\r\n//   if (chain === ChainType.TestNet) {\r\n//     return 22314999;\r\n//   }\r\n\r\n//   throw new Error(`App not defined for chain ${chain}`);\r\n// }\r\nconst singlePayTxn: Scenario = async (\r\n  chain: ChainType,\r\n  address: string,\r\n): Promise<ScenarioReturnType> => {\r\n  const suggestedParams = await apiGetTxnParams(chain);\r\n  const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n    from: address,\r\n    to: testAccounts[0].addr,\r\n    amount: 1000,\r\n    note: new Uint8Array(Buffer.from(\"example note value\")),\r\n    suggestedParams,\r\n  });\r\n\r\n  const txnsToSign = [{ txn, message: \"This is a transaction message\" }];\r\n  return [txnsToSign];\r\n};\r\n\r\n// const singlePayTxnWithClose: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singlePayTxnWithRekey: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singlePayTxnWithRekeyAndClose: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singlePayTxnWithInvalidAuthAddress: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [\r\n//     { txn, message: \"This is a transaction message\", authAddr: \"INVALID_ADDRESS\" },\r\n//   ];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAssetOptInTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n\r\n//   const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAssetOptInTxnToInvalidAsset: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = 100;\r\n\r\n//   const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAssetTransferTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 1000000,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAssetTransferTxnWithClose: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 1000000,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn, message: \"This is a transaction message\" }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleInvalidAssetTransferTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = 100; // Invalid asset id\r\n\r\n//   const txn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 1000000,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppOptIn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationOptInTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCall: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationNoOpTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCallNoArgs: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationNoOpTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCallWithRekey: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationNoOpTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCloseOut: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationCloseOutTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn, message: \"This is a transaction message\" }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppClearState: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationClearStateTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCreate: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\r\n//   const clearProgram = Uint8Array.from([3, 129, 1, 67]);\r\n\r\n//   const txn = algosdk.makeApplicationCreateTxnFromObject({\r\n//     from: address,\r\n//     approvalProgram,\r\n//     clearProgram,\r\n//     numGlobalInts: 1,\r\n//     numGlobalByteSlices: 2,\r\n//     numLocalInts: 3,\r\n//     numLocalByteSlices: 4,\r\n//     onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppCreateExtraPage: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\r\n//   const clearProgram = Uint8Array.from([3, 129, 1, 67]);\r\n\r\n//   const txn = algosdk.makeApplicationCreateTxnFromObject({\r\n//     from: address,\r\n//     approvalProgram,\r\n//     clearProgram,\r\n//     numGlobalInts: 1,\r\n//     numGlobalByteSlices: 2,\r\n//     numLocalInts: 3,\r\n//     numLocalByteSlices: 4,\r\n//     extraPages: 1,\r\n//     onComplete: algosdk.OnApplicationComplete.NoOpOC,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppUpdate: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const approvalProgram = Uint8Array.from([4, 129, 1, 67]);\r\n//   const clearProgram = Uint8Array.from([3, 129, 1, 67]);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationUpdateTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     approvalProgram,\r\n//     clearProgram,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const singleAppDelete: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const appIndex = getAppIndex(chain);\r\n\r\n//   const txn = algosdk.makeApplicationDeleteTxnFromObject({\r\n//     from: address,\r\n//     appIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     appArgs: [Uint8Array.from([0]), Uint8Array.from([0, 1])],\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn }];\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const sign1FromGroupTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 1000000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn: txn1 }, { txn: txn2, signers: [] }];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const sign2FromGroupTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 1000000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 500000,\r\n//     note: new Uint8Array(Buffer.from(\"this is a payment txn\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [\r\n//     { txn: txn1 },\r\n//     { txn: txn2, signers: [] },\r\n//     { txn: txn3, message: \"This is a transaction message\" },\r\n//   ];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signGroupWithPayOptinTransfer: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 500000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 1000000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn: txn1 }, { txn: txn2 }, { txn: txn3 }];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signGroupWithPayRekey: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 500000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 500000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn: txn1 }, { txn: txn2, message: \"This is a transaction message\" }];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signTxnWithAssetClose: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n//   const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex: closeAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn: txn1 }, { txn: txn2 }];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signTxnWithRekey: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [{ txn: txn1, message: \"This is a transaction message\" }, { txn: txn2 }];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signTxnWithRekeyAndAssetClose: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\r\n//   const assetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     assetIndex,\r\n//     amount: 10,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 20,\r\n//     assetIndex: closeAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 30,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 40,\r\n//     assetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [\r\n//     { txn: txn1, message: \"This is a transaction message\" },\r\n//     { txn: txn2 },\r\n//     { txn: txn3 },\r\n//     { txn: txn4, message: \"This is a transaction message\" },\r\n//   ];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const signGroupOf7: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const closeAssetIndex = getAssetIndex(chain, AssetTransactionType.Close);\r\n\r\n//   const optIn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const assetXfer = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const assetClose = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50,\r\n//     assetIndex: closeAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const payment = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 500000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const accountClose = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 0,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const accountRekey = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 1000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const accountRekeyAndClose = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 50000,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     closeRemainderTo: testAccounts[1].addr,\r\n//     rekeyTo: testAccounts[2].addr,\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txnsToSign = [\r\n//     { txn: optIn },\r\n//     { txn: assetXfer },\r\n//     { txn: assetClose },\r\n//     { txn: payment },\r\n//     { txn: accountClose },\r\n//     { txn: accountRekey },\r\n//     { txn: accountRekeyAndClose },\r\n//   ];\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const fullTxnGroup: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txnsToSign: Array<{ txn: algosdk.Transaction; signers?: [string] }> = [];\r\n\r\n//   for (let i = 0; i < 8; i++) {\r\n//     const assetIndex = 100 + i;\r\n\r\n//     const optIn = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//       from: address,\r\n//       to: address,\r\n//       amount: 0,\r\n//       assetIndex,\r\n//       note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//       suggestedParams,\r\n//     });\r\n\r\n//     const closeOut = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//       from: address,\r\n//       to: address,\r\n//       amount: 0,\r\n//       assetIndex,\r\n//       note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//       closeRemainderTo: testAccounts[1].addr,\r\n//       suggestedParams,\r\n//     });\r\n\r\n//     txnsToSign.push({ txn: optIn });\r\n//     txnsToSign.push({ txn: closeOut });\r\n//   }\r\n\r\n//   algosdk.assignGroupID(txnsToSign.map(toSign => toSign.txn));\r\n\r\n//   return [txnsToSign];\r\n// };\r\n\r\n// const multipleNonAtomicTxns: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }];\r\n\r\n//   const group2 = [{ txn: txn2, message: \"This is a transaction message\" }];\r\n\r\n//   const group3 = [{ txn: txn3 }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const multipleNonAtomicTxnsForOnlyAssets: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 10000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 30000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }];\r\n\r\n//   const group2 = [{ txn: txn2 }];\r\n\r\n//   const group3 = [{ txn: txn3, message: \"This is a transaction message\" }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const multipleNonAtomicTxnsMixed: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 10000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }];\r\n\r\n//   const group2 = [{ txn: txn2 }];\r\n\r\n//   const group3 = [{ txn: txn3 }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const atomicGroupAndNonAtomicTxnsForOnlyPayment: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"txn 4\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [\r\n//     { txn: txn1, message: \"This is a transaction message\" },\r\n//     { txn: txn2, message: \"This is a transaction message\" },\r\n//   ];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }];\r\n\r\n//   const group3 = [{ txn: txn4 }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const atomicGroupAndNonAtomicTxnsMixed: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 10000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"txn 4\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3, message: \"This is a transaction message\" }];\r\n\r\n//   const group3 = [{ txn: txn4 }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const multipleAtomicGroupsForOnlyPayment: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }, { txn: txn4 }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const multipleAtomicGroupsForOnlyAssets: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 10000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 2000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2, signers: [] }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }, { txn: txn4, signers: [] }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const multipleAtomicGroupsWithInvalidAsset: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const invalidAssetIndex = 100;\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 2000,\r\n//     assetIndex: invalidAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }, { txn: txn4 }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const multipleAtomicGroupsMixed1: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 10000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2, signers: [] }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }, { txn: txn4 }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const multipleAtomicGroupsMixed2: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n//   const optInAssetIndex = getAssetIndex(chain, AssetTransactionType.OptIn);\r\n//   const transferAssetIndex = getAssetIndex(chain, AssetTransactionType.Transfer);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 2000,\r\n//     assetIndex: transferAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makeAssetTransferTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: address,\r\n//     amount: 0,\r\n//     assetIndex: optInAssetIndex,\r\n//     note: new Uint8Array(Buffer.from(\"example note value\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3, signers: [] }, { txn: txn4 }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const multipleAtomicGroupSignOnly2: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn4 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100004,\r\n//     note: new Uint8Array(Buffer.from(\"txn 4\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1, signers: [] }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3, signers: [] }, { txn: txn4 }];\r\n//   algosdk.assignGroupID(group2.map(toSign => toSign.txn));\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const atomicGroupAndNonAtomicTxnsSignOnly2: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 1 txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"atomic group 2 txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1, signers: [] }, { txn: txn2 }];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   const group2 = [{ txn: txn3 }];\r\n\r\n//   return [group1, group2];\r\n// };\r\n\r\n// const atomicNoSignTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [\r\n//     { txn: txn1, signers: [] },\r\n//     { txn: txn2, signers: [] },\r\n//     { txn: txn3, signers: [] },\r\n//   ];\r\n//   algosdk.assignGroupID(group1.map(toSign => toSign.txn));\r\n\r\n//   return [group1];\r\n// };\r\n\r\n// const atomicAndSingleNoSignTxn: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn1 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100001,\r\n//     note: new Uint8Array(Buffer.from(\"txn 1\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn2 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100002,\r\n//     note: new Uint8Array(Buffer.from(\"txn 2\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const txn3 = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: testAccounts[0].addr,\r\n//     to: address,\r\n//     amount: 100003,\r\n//     note: new Uint8Array(Buffer.from(\"txn 3\")),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//   const group1 = [{ txn: txn1 }];\r\n\r\n//   const group2 = [{ txn: txn2, message: \"This is a transaction message\" }];\r\n\r\n//   const group3 = [{ txn: txn3, signers: [] }];\r\n\r\n//   return [group1, group2, group3];\r\n// };\r\n\r\n// const txnWithLargeNote: Scenario = async (\r\n//   chain: ChainType,\r\n//   address: string,\r\n// ): Promise<ScenarioReturnType> => {\r\n//   const suggestedParams = await apiGetTxnParams(chain);\r\n\r\n//   const txn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\r\n//     from: address,\r\n//     to: testAccounts[0].addr,\r\n//     amount: 100000,\r\n//     note: new Uint8Array(Buffer.from(\"max length note (512)\" + \"!\".repeat(491))),\r\n//     suggestedParams,\r\n//   });\r\n\r\n//    const txnsToSign = [{ txn, message: \"This is a transaction message\" }];\r\n//    return [txnsToSign];\r\n// };\r\n\r\nexport const scenarios: Array<{ name: string; scenario: Scenario }> = [\r\n  {\r\n    name: \"Sign single pay txn\",\r\n    scenario: singlePayTxn,\r\n  },\r\n\r\n  // {\r\n  //   name: \"2. Sign single pay txn with close\",\r\n  //   scenario: singlePayTxnWithClose,\r\n  // },\r\n  // {\r\n  //   name: \"3. Sign single pay txn with rekey\",\r\n  //   scenario: singlePayTxnWithRekey,\r\n  // },\r\n  // {\r\n  //   name: \"4. Sign single pay txn with rekey and close\",\r\n  //   scenario: singlePayTxnWithRekeyAndClose,\r\n  // },\r\n  // {\r\n  //   name: \"5. Single pay txn with invalid auth address\",\r\n  //   scenario: singlePayTxnWithInvalidAuthAddress,\r\n  // },\r\n  // {\r\n  //   name: \"6. Sign single asset opt-in txn\",\r\n  //   scenario: singleAssetOptInTxn,\r\n  // },\r\n  // {\r\n  //   name: \"7. Sign single asset opt-in txn with invalid asset id\",\r\n  //   scenario: singleAssetOptInTxnToInvalidAsset,\r\n  // },\r\n  // {\r\n  //   name: \"8. Sign single asset transfer txn\",\r\n  //   scenario: singleAssetTransferTxn,\r\n  // },\r\n  // {\r\n  //   name: \"9. Sign single asset transfer txn with close\",\r\n  //   scenario: singleAssetTransferTxnWithClose,\r\n  // },\r\n  // {\r\n  //   name: \"10. Sign single asset transfer txn with invalid asset id\",\r\n  //   scenario: singleInvalidAssetTransferTxn,\r\n  // },\r\n  // {\r\n  //   name: \"11. Sign single app opt-in txn\",\r\n  //   scenario: singleAppOptIn,\r\n  // },\r\n  // {\r\n  //   name: \"12. Sign single app call txn\",\r\n  //   scenario: singleAppCall,\r\n  // },\r\n  // {\r\n  //   name: \"13. Sign single app call txn with rekey\",\r\n  //   scenario: singleAppCallWithRekey,\r\n  // },\r\n  // {\r\n  //   name: \"14. Sign single app close out txn\",\r\n  //   scenario: singleAppCloseOut,\r\n  // },\r\n  // {\r\n  //   name: \"15. Sign 1 of 2 txns from a group\",\r\n  //   scenario: sign1FromGroupTxn,\r\n  // },\r\n  // {\r\n  //   name: \"16. Sign 2 of 3 txns from a group\",\r\n  //   scenario: sign2FromGroupTxn,\r\n  // },\r\n  // {\r\n  //   name: \"17. Sign txn group with pay, asset opt-in, and asset transfer\",\r\n  //   scenario: signGroupWithPayOptinTransfer,\r\n  // },\r\n  // {\r\n  //   name: \"18. Sign txn group with pay and rekey\",\r\n  //   scenario: signGroupWithPayRekey,\r\n  // },\r\n  // {\r\n  //   name: \"19. Sign txn group with asset close\",\r\n  //   scenario: signTxnWithAssetClose,\r\n  // },\r\n  // {\r\n  //   name: \"20. Sign txn group with rekey\",\r\n  //   scenario: signTxnWithRekey,\r\n  // },\r\n  // {\r\n  //   name: \"21. Sign txn group with rekey and asset close\",\r\n  //   scenario: signTxnWithRekeyAndAssetClose,\r\n  // },\r\n  // {\r\n  //   name: \"22. Sign group of 7\",\r\n  //   scenario: signGroupOf7,\r\n  // },\r\n  // {\r\n  //   name: \"23. Full txn group\",\r\n  //   scenario: fullTxnGroup,\r\n  // },\r\n  // {\r\n  //   name: \"24. Sign multiple non-atomic txns\",\r\n  //   scenario: multipleNonAtomicTxns,\r\n  // },\r\n  // {\r\n  //   name: \"25. Sign multiple non-atomic txns for only assets\",\r\n  //   scenario: multipleNonAtomicTxnsForOnlyAssets,\r\n  // },\r\n  // {\r\n  //   name: \"26. Sign mixed multiple non-atomic txns\",\r\n  //   scenario: multipleNonAtomicTxnsMixed,\r\n  // },\r\n  // {\r\n  //   name: \"27. Sign atomic txn group and non-atomic txns for only payment\",\r\n  //   scenario: atomicGroupAndNonAtomicTxnsForOnlyPayment,\r\n  // },\r\n  // {\r\n  //   name: \"28. Sign mixed atomic txn group and non-atomic txns\",\r\n  //   scenario: atomicGroupAndNonAtomicTxnsMixed,\r\n  // },\r\n  // {\r\n  //   name: \"29. Sign multiple atomic txn groups for only payment\",\r\n  //   scenario: multipleAtomicGroupsForOnlyPayment,\r\n  // },\r\n  // {\r\n  //   name: \"30. Sign multiple atomic txn groups for only assets\",\r\n  //   scenario: multipleAtomicGroupsForOnlyAssets,\r\n  // },\r\n  // {\r\n  //   name: \"31. Sign multiple atomic txn groups with invalid asset\",\r\n  //   scenario: multipleAtomicGroupsWithInvalidAsset,\r\n  // },\r\n  // {\r\n  //   name: \"32. Sign first mixed 2 atomic txn groups\",\r\n  //   scenario: multipleAtomicGroupsMixed1,\r\n  // },\r\n  // {\r\n  //   name: \"33. Sign second mixed 2 atomic txn groups\",\r\n  //   scenario: multipleAtomicGroupsMixed2,\r\n  // },\r\n  // {\r\n  //   name: \"34. Sign only 2 txns in multiple atomic txn groups\",\r\n  //   scenario: multipleAtomicGroupSignOnly2,\r\n  // },\r\n  // {\r\n  //   name: \"35. Sign only 2 txns in atomic txn group and non-atomic txns\",\r\n  //   scenario: atomicGroupAndNonAtomicTxnsSignOnly2,\r\n  // },\r\n  // {\r\n  //   name: \"36. Atomic group with no sig needed (invalid)\",\r\n  //   scenario: atomicNoSignTxn,\r\n  // },\r\n  // {\r\n  //   name: \"37. Atomic group and single txn with no sig needed (invalid)\",\r\n  //   scenario: atomicAndSingleNoSignTxn,\r\n  // },\r\n  // {\r\n  //   name: \"38. Txn with large note\",\r\n  //   scenario: txnWithLargeNote,\r\n  // },\r\n  // {\r\n  //   name: \"39. Sign single app clear state txn\",\r\n  //   scenario: singleAppClearState,\r\n  // },\r\n  // {\r\n  //   name: \"40. Sign single app create txn\",\r\n  //   scenario: singleAppCreate,\r\n  // },\r\n  // {\r\n  //   name: \"41. Sign single app update txn\",\r\n  //   scenario: singleAppUpdate,\r\n  // },\r\n  // {\r\n  //   name: \"42. Sign single app delete txn\",\r\n  //   scenario: singleAppDelete,\r\n  // },\r\n  // {\r\n  //   name: \"43. Sign single app call with no args\",\r\n  //   scenario: singleAppCallNoArgs,\r\n  // },\r\n  // {\r\n  //   name: \"44. Sign single app create txn with extra page (not working with ledger app v1.2.15)\",\r\n  //   scenario: singleAppCreateExtraPage,\r\n  // },\r\n];\r\n"],"sourceRoot":""}